###########################
######### BUILDER #########
###########################


# pull official base image
FROM python:3.8.10-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
# prevent python from writing byte code
ENV PYTHONDONTWRITEBYTECODE 1
# prevent python from buffering stdout and sterr
ENV PYTHONBUFFERED 1

RUN apk update
RUN apk add postgresql-dev gcc python3-dev musl-dev
RUN apk add jpeg-dev zlib-dev libjpeg
RUN pip install Pillow


# lint
# RUN pip install --upgrade pip
# RUN pip install flake8==3.9.2
# COPY . .
# RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
# RUN pip install -r requirements.txt
# RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt



# pull official base image
FROM python:3.8.10-alpine

# create directory for the app user
RUN mkdir -p /home/app/

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directorise
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME

# install dependencies
RUN apk update
RUN apk add libpq

COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*
RUN apk add jpeg-dev zlib-dev libjpeg
RUN pip install Pillow


# copy entrypoint.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g' $APP_HOME/entrypoint.prod.sh
RUN chmod +x $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME 

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

USER app

# run 
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]

